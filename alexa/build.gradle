import java.time.LocalDate
import java.time.format.DateTimeFormatter

buildscript {
    dependencies {
        classpath 'com.github.skhatri:gradle-s3-plugin:1.0.4'
    }
    repositories {
        jcenter()
    }
}
apply plugin: 's3'

s3 {
    bucket = 'vuifaceoff-bucket'
    awsProfile = 'default'
    upload {
        //"key" is the name of the target file in S3 (in this example we create a versioned file)
        key = DateTimeFormatter.ofPattern("yyyy/MM/dd").format(LocalDate.now()) +
              '/alexa-vui-faceoff.zip'

        // "file" is the name of the local source file
        file = './build/distributions/alexa-vui-faceoff.zip'

        //"link" will create http redirect to the latest uploaded version of the file
        // This will redirect is only available via the "s3 static webpage" option.
        // walkthorugh link from AWS on how to set it up
        // https://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html
        //link = 'latest/gradle-plugin.jar'
    }
    /*download {
        key = 'latest/gradle-plugin.jar'
        saveTo = 'gradle-pugin.jar'
    }*/
}

//apply plugin: 'java'
apply plugin: 'groovy'

repositories {
    jcenter()
    maven{
        url = 'https://m2proxy.atlassian.com/repository/public'
    }
}

dependencies {

    compile(
            'org.codehaus.groovy:groovy:2.4.10',
            'org.codehaus.groovy:groovy-xml:2.4.10',
            'org.codehaus.groovy:groovy-json:2.4.10',
            'io.github.http-builder-ng:http-builder-ng-okhttp:0.14.1',
            'com.amazonaws:aws-lambda-java-core:1.1.0',
            'com.amazonaws:aws-lambda-java-events:1.1.0',
            'com.amazon.alexa:alexa-skills-kit:1.1.2',
            'log4j:log4j:1.2.17',
            'commons-io:commons-io:2.5',
            'org.apache.commons:commons-lang3:3.5'
    )
    compile 'org.slf4j:slf4j-api:1.7.25'

    // doest
    compile 'com.atlassian.jira:jira-rest-java-client:2.0.0-m2'
}

task buildZip(type: Zip) {
    from compileGroovy
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

build.dependsOn buildZip
